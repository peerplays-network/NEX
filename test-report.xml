<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="/home/ali/Desktop/Projects/peerplays/NEX/src/api/params/__test__/params.spec.ts">
    <testCase name="Default Exchanges values should have the correct default values" duration="3"/>
    <testCase name="Default locale values should have the correct default values" duration="1"/>
    <testCase name="Default notifications values should have the correct default values" duration="0"/>
    <testCase name="Default settings values should have the correct default values" duration="2"/>
    <testCase name="Testing network parameters should have the correct default values" duration="4"/>
    <testCase name="symbols To Be Excepted should have the correct default values" duration="1"/>
  </file>
  <file path="/home/ali/Desktop/Projects/peerplays/NEX/src/api/utils/__test__/utils.spec.ts">
    <testCase name="Testing utils functions  SortId function sortId should returns -1 for a = 1.2.3 and b = 1.2.4 in sortId(a,b)" duration="5"/>
    <testCase name="Testing utils functions  SortId function sortId should returns 1 for a = 1.2.3 and b = 1.2.4 in sortId(b,a)" duration="1"/>
    <testCase name="Testing utils functions  SortId function sortId should returns -1 for b = 1.2.4 and c = 1.2.5 in sortId(b,c)" duration="0"/>
    <testCase name="Testing utils functions  SortId function sortId should returns -2 for a = 1.2.3 and c = 1.2.5 in sortId(a,c)" duration="1"/>
    <testCase name="Testing utils functions  SortId function sortId should returns 1 for a = 1.2.3 and b = 1.2.4 in sortId(a,b, inverse=true)" duration="1"/>
    <testCase name="Testing utils functions  SortId function sortId should returns -1 for a = 1.2.3 and b = 1.2.4 in sortId(b,a, inverse=true)" duration="0"/>
    <testCase name="Testing utils functions  SortId function sortId should returns 1 for b = 1.2.4 and c = 1.2.5 in sortId(b,c, inverse=true)" duration="1"/>
    <testCase name="Testing utils functions  SortId function sortId should returns 2 for a = 1.2.3 and c = 1.2.5 in sortId(a,c, inverse=true)" duration="0"/>
    <testCase name="Testing utils functions  isObjectId function 1.2.3 is a valid acoount object id" duration="1"/>
    <testCase name="Testing utils functions  isObjectId function 1.3.4 is a valid asset object id" duration="6"/>
    <testCase name="Testing utils functions  isObjectId function 1.6.1 is a valid witness object id" duration="1"/>
    <testCase name="Testing utils functions  isObjectId function 1.2 is invalid object id" duration="0"/>
    <testCase name="Testing utils functions  isObjectId function 1.2.3.4 is an invalid object id" duration="0"/>
    <testCase name="Testing utils functions  isObjectId function hello is an invalid object id" duration="0"/>
    <testCase name="Testing utils functions  isObjectId function 1 is an invalid object id" duration="1"/>
    <testCase name="Testing utils functions  isObjectId function empty string is an invalid object id" duration="0"/>
    <testCase name="Testing utils functions  trimNum function trimNum function should return 123.45 for trimNum(123.4567, 2)" duration="1"/>
    <testCase name="Testing utils functions  trimNum function trimNum function should return 123.456 for trimNum(123.4567, 3)" duration="0"/>
    <testCase name="Testing utils functions  trimNum function trimNum function should return 123.4567 for trimNum(123.4567, 4)" duration="1"/>
    <testCase name="Testing utils functions  trimNum function trimNum function should return 0 for trimNum(Nan, any digit)" duration="0"/>
    <testCase name="Testing utils functions  isNumber function 1 is a number" duration="0"/>
    <testCase name="Testing utils functions  isNumber function 0 is a number" duration="1"/>
    <testCase name="Testing utils functions  isNumber function h is not a number" duration="0"/>
    <testCase name="Testing utils functions  isNumber function epmty string is not a number" duration="0"/>
    <testCase name="Testing utils functions  isNumber function It is possible to use `.` in is number function" duration="0"/>
    <testCase name="Testing utils functions  isNumberKey function (in respone to react keyboardEvent) should return true for number keys" duration="0"/>
    <testCase name="Testing utils functions  isNumberKey function (in respone to react keyboardEvent) should return false for non-number keys" duration="0"/>
    <testCase name="Testing utils functions  ensureInputNumberValidity function should prevent non-number keys from being entered should prevent `a` from being entered" duration="2"/>
    <testCase name="Testing utils functions  ensureInputNumberValidity function Should check number and prevent numbers with integers part longer than 6 char should prevent 588888888.55555 from being entered" duration="1"/>
    <testCase name="Testing utils functions  ensureInputNumberValidity function Should check number and prevent numbers with integers part longer than 6 char should allow entering 5888.55555 " duration="1"/>
    <testCase name="Testing utils functions  validateGrapheneAccountName function should return true for valid Graphene account names" duration="1"/>
    <testCase name="Testing utils functions  validateGrapheneAccountName function Should return false for invalid Graphene account names" duration="1"/>
    <testCase name="Testing utils functions  isUrlsEqual function should return true for URLs that are equal ignoring trailing slashes and the protocol part of the URL" duration="1"/>
    <testCase name="Testing utils functions  isUrlsEqual function should return false for URLs that are not equal ignoring trailing slashes and the protocol part of the URL" duration="1"/>
    <testCase name="Testing utils functions  getBlockchainFromSymbol function the blockchain for &quot;HIVE&quot; is Hive" duration="0"/>
    <testCase name="Testing utils functions  getBlockchainFromSymbol function the blockchain for &quot;Hive&quot; is Hive" duration="1"/>
    <testCase name="Testing utils functions  getBlockchainFromSymbol function the blockchain for the symbol &quot;ETH&quot; is Ethereum" duration="0"/>
    <testCase name="Testing utils functions  getBlockchainFromSymbol function the blockchain for the symbol &quot;eth&quot; is Ethereum" duration="0"/>
    <testCase name="Testing utils functions  getBlockchainFromSymbol function the blockchain for the symbol &quot;BTC&quot; is Bitcoin" duration="1"/>
    <testCase name="Testing utils functions  getBlockchainFromSymbol function the blockchain for the symbol &quot;btc&quot; is Bitcoin" duration="0"/>
  </file>
  <file path="/home/ali/Desktop/Projects/peerplays/NEX/src/common/components/TableHeading/__test__/TableHeading.spec.tsx">
    <testCase name="TableHeading component TableHeading in vote table renders correctly for Vote table rank column" duration="26"/>
    <testCase name="TableHeading component TableHeading in vote table renders correctly for Vote table Name column" duration="5"/>
  </file>
  <file path="/home/ali/Desktop/Projects/peerplays/NEX/src/common/components/UserLinkExtractor/__test__/UserLinkExtactor.spec.tsx">
    <testCase name="UserLinkExtractor component UserLinkExtractor component in settings page - membership tab renders membership info correctly with correct link" duration="48"/>
    <testCase name="UserLinkExtractor component UserLinkExtractor component in wallet page - Receive tab renders receive instruction correctly with correct link" duration="10"/>
  </file>
  <file path="/home/ali/Desktop/Projects/peerplays/NEX/src/api/utils/__test__/isArrayEqual.spec.ts">
    <testCase name="Testing isArrayEqual function [3,2,1] is equal to [3,2,1]" duration="2"/>
    <testCase name="Testing isArrayEqual function [3,2,1] is  equal to [1,2,3]" duration="0"/>
    <testCase name="Testing isArrayEqual function [3,2,1] is not equal to [5,1,4]" duration="0"/>
    <testCase name="Testing isArrayEqual function [] is equal to []" duration="0"/>
    <testCase name="Testing isArrayEqual function null is equal to null" duration="0"/>
    <testCase name="Testing isArrayEqual function undefined is equal to undefined" duration="0"/>
    <testCase name="Testing isArrayEqual function [{network: &apos;Peerplays&apos;}] is equal to [{network: &apos;Peerplays&apos;}]" duration="1"/>
  </file>
  <file path="/home/ali/Desktop/Projects/peerplays/NEX/src/api/utils/__test__/copyText.spec.ts">
    <testCase name="copyText should call navigator.clipboard.writeText with the correct argument" duration="3"/>
    <testCase name="copyText should not throw an error if navigator.clipboard is undefined" duration="1"/>
  </file>
  <file path="/home/ali/Desktop/Projects/peerplays/NEX/src/api/utils/__test__/getPassedTime.spec.ts">
    <testCase name="getPassedTime should correctly calculate the passed time" duration="2"/>
  </file>
  <file path="/home/ali/Desktop/Projects/peerplays/NEX/src/common/components/ActivityAndNotificationTable/components/ActivityAndNotificationTag/__test__/ActivityAndNotificationTag.spec.tsx">
    <testCase name="Activity Tag renders correctly for account creation" duration="23"/>
    <testCase name="Activity Tag renders correctly for account update" duration="3"/>
  </file>
  <file path="/home/ali/Desktop/Projects/peerplays/NEX/src/common/components/FormDisclamer/__test__/FormDiscalmer.spec.tsx">
    <testCase name="FormDisclamer component renders FormDiscalmet correctly in login page" duration="32"/>
    <testCase name="FormDisclamer component renders FormDiscalmet correctly in sign up page" duration="6"/>
  </file>
  <file path="/home/ali/Desktop/Projects/peerplays/NEX/src/common/components/DashboardLoginButton/__test__/DashboardLoginButton.spec.tsx">
    <testCase name="Dashboard login button Deposit tab renders correctly for not logged in user dashboard deposit tab(BTC)" duration="39"/>
    <testCase name="Dashboard login button Deposit tab renders correctly for not logged in user dashboard deposit tab(HIVE)" duration="7"/>
  </file>
</testExecutions>