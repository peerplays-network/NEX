# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: License-Scanning.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml
  - template: Secret-Detection.gitlab-ci.yml
  - template: Container-Scanning.gitlab-ci.yml
  - template: DAST.gitlab-ci.yml

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

stages:
- build
- test
- deploy
- dast

build-qa:
  # node docker image on which this would be run
  image: node:16.17.0-alpine3.16
  stage: build
  script:
    - echo "NEXT_PUBLIC_DEFAULT_TOKEN='$DEV_TOKEN'" >> .env
    - echo "NEXT_PUBLIC_DEFAULT_QUOTE='$DEV_QUOTE'" >> .env
    - echo "NEXT_PUBLIC_FAUCET_URL='$DEV_FAUCET'" >> .env
    - echo "NEXT_PUBLIC_DEFAULT_CHAIN_ID='$DEV_CHAIN_ID'" >> .env
    - npm install
    - npm run build
  only:
    - tags
    - branches
    - merge_requests
  artifacts: 
    paths:
    - .next/
    - .env
  tags:
    - build

build-production:
  # node docker image on which this would be run
  image: node:16.17.0-alpine3.16
  stage: build
  script:
    - echo "NEXT_PUBLIC_DEFAULT_TOKEN='$PROD_TOKEN'" >> .env
    - echo "NEXT_PUBLIC_DEFAULT_QUOTE='$PROD_QUOTE'" >> .env
    - echo "NEXT_PUBLIC_FAUCET_URL='$PROD_FAUCET'" >> .env
    - echo "NEXT_PUBLIC_DEFAULT_CHAIN_ID='$PROD_CHAIN_ID'" >> .env
    - npm install
    - npm run build
  only:
    - tags
    - branches
    - merge_requests
  artifacts: 
    paths:
    - .next/
    - .env
  tags:
    - staging

docker_build:
  image: docker:stable
  stage: build
  services:
    - docker:19.03.12-dind
  variables:
    IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
  script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -f dev.Dockerfile -t $IMAGE .
    - docker push $IMAGE
  only:
    - branches
    - merge_requests

sonarcloud-check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - merge_requests
    - branches
  tags:
    - sonar-check

deploy_review:
  dependencies: [build-qa]
  stage: deploy
  script:
    - pm2 del nex-review || true
    - npm install 
    - pm2 start npm --name nex-review -- run start
    - echo "http://$CI_ENVIRONMENT_SLUG.$APPS_DOMAIN" > environment_url.txt
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_ENVIRONMENT_SLUG.$APPS_DOMAIN
  artifacts:
    paths:
      - environment_url.txt
  only:
    - merge_requests
  except:
    - main
  tags:
    - deploy-review

stop_review_app:
  stage: deploy
  script: stop-review-app
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  only:
    - merge_requests
  except:
    - main
  tags:
    - deploy-review
  when: manual

deployToQA:
  stage: deploy
  dependencies: [build-qa]
  script: 
    - pm2 del nex-QA || true
    - npm install 
    - pm2 start npm --name nex-QA -- run start
  environment:
    name: QA
    url: https://nex-cicd.peerplays.download
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'
  when: manual 
  tags:
    - deploy

deployToStaging:
  stage: deploy
  script: 
    - pm2 del nex-staging || true
    - rm .env.example
    - npm install
    - pm2 start npm --name nex-staging -- run start
  dependencies: [build-production]
  environment:
    name: staging
    url: https://nex-staging.peerplays.download
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
  when: manual 
  tags:
    - staging

deployToProduction:
  stage: deploy
  script: 
    - pm2 del nex || true
    - rm .env.example
    - npm install
    - pm2 start npm --name nex -- run start
  dependencies: [build-production]
  #environment:
  #  name: production
  #  url: 
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
  when: manual 
  tags:
    - production

dast:
  stage: dast
  before_script:
    - if [ "$CI_COMMIT_REF_NAME" != "dev" ]; then export DAST_WEBSITE=$(cat environment_url.txt); else export DAST_WEBSITE=$DAST_WEBSITE; fi
  artifacts:
    paths: 
      - gl-dast-report.json
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME != "main"'
    when: always
  - if: '$CI_COMMIT_REF_NAME == "dev"'
    when: always
  - if: '$CI_COMMIT_REF_NAME != "dev"'
    when: never

