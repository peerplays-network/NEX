workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

#include:
#  - template: Jobs/Dependency-Scanning.latest.gitlab-ci.yml
#  - template: Jobs/License-Scanning.latest.gitlab-ci.yml
#  - template: Jobs/SAST.latest.gitlab-ci.yml
#  - template: Jobs/Secret-Detection.latest.gitlab-ci.yml
#  - template: Jobs/Container-Scanning.latest.gitlab-ci.yml
#  - template: DAST.latest.gitlab-ci.yml

#variables:
#  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#
stages:
- build
#- test
- deploy
#- dast
#
#build-qa:
#  # node docker image on which this would be run
#  image: node:16.17.0-alpine3.16
#  stage: build
#  script:
#    - echo "NEXT_PUBLIC_FORCE_VERSION='v1'" >> .env
#    - echo "NEXT_PUBLIC_DEFAULT_TOKEN='$DEV_TOKEN'" >> .env
#    - echo "NEXT_PUBLIC_DEFAULT_QUOTE='$DEV_QUOTE'" >> .env
#    - echo "NEXT_PUBLIC_FAUCET_URL='$DEV_FAUCET'" >> .env
#    - echo "NEXT_PUBLIC_DEFAULT_CHAIN_ID='$DEV_CHAIN_ID'" >> .env
#    - echo "NEXT_PUBLIC_FORCE_VERSION='$NEXT_PUBLIC_FORCE_VERSION'" >> .env
#    - npm install
#    - npm run build --debug
#    - cd .. && tar czf nex-qa.tar.gz NEX/
#    - cp nex-qa.tar.gz NEX/ && cd NEX
#  rules:
#    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^release/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^hot-fix/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^feature/
#  artifacts: 
#    paths:
#    - nex-qa.tar.gz
#  tags:
#    - build
#
#build-stg:
#  # node docker image on which this would be run
#  image: node:16.17.0-alpine3.16
#  stage: build
#  script:
#    - echo "NEXT_PUBLIC_FORCE_VERSION='v1'" >> .env
#    - echo "NEXT_PUBLIC_DEFAULT_TOKEN='$DEV_TOKEN'" >> .env
#    - echo "NEXT_PUBLIC_DEFAULT_QUOTE='$DEV_QUOTE'" >> .env
#    - echo "NEXT_PUBLIC_FAUCET_URL='$DEV_FAUCET'" >> .env
#    - echo "NEXT_PUBLIC_DEFAULT_CHAIN_ID='$DEV_CHAIN_ID'" >> .env
#    - echo "NEXT_PUBLIC_FORCE_VERSION='$NEXT_PUBLIC_FORCE_VERSION'" >> .env
#    - npm install
#    - npm run build
#    - cd .. && tar czf nex-stg.tar.gz NEX/
#    - cp nex-stg.tar.gz NEX/ && cd NEX
#  rules:
#    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^release/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^hot-fix/ 
#  artifacts: 
#    paths:
#    - nex-stg.tar.gz
#  tags:
#    - build
#
build-production:
  # node docker image on which this would be run
  image: node:16.17.0-alpine3.16
  stage: build
  script:
    - echo "NEXT_PUBLIC_FORCE_VERSION='v1'" >> .env
    - echo "NEXT_PUBLIC_DEFAULT_TOKEN='$PROD_TOKEN'" >> .env
    - echo "NEXT_PUBLIC_DEFAULT_QUOTE='$PROD_QUOTE'" >> .env
    - echo "NEXT_PUBLIC_FAUCET_URL='$PROD_FAUCET'" >> .env
    - echo "NEXT_PUBLIC_DEFAULT_CHAIN_ID='$PROD_CHAIN_ID'" >> .env
    - echo "NEXT_PUBLIC_FORCE_VERSION='$NEXT_PUBLIC_FORCE_VERSION'" >> .env
    - echo "NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID='$NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID'" >> .env
    - npm install
    - npm run build
    - cd .. && tar czf nex-prod.tar.gz NEX/
    - cp nex-prod.tar.gz NEX/ && cd NEX
  rules:
  - if: '$CI_COMMIT_BRANCH == "feature/pipeline-deploy-rework"'
  artifacts: 
    paths:
    - nex-prod.tar.gz
  tags:
    - staging
#
#docker_build:
#  image: docker:stable
#  stage: build
#  services:
#    - docker:19.03.12-dind
#  variables:
#    IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
#  script:
#    - docker info
#    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#    - docker build -f dev.Dockerfile -t $IMAGE .
#    - docker push $IMAGE
#  rules:
#  - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" 
#
#sonarcloud-check:
#  stage: test
#  image:
#    name: sonarsource/sonar-scanner-cli:latest
#    entrypoint: [""]
#  cache:
#    key: "${CI_JOB_NAME}"
#    paths:
#      - .sonar/cache
#  script:
#    - npm install
#    - npm run test:ci 
#    - sonar-scanner
#  only:
#    - merge_requests
#    - branches
#  tags:
#    - sonar-check
#
#gitlab-unittest:
#  image: node:16.17.0-alpine3.16
#  stage: test
#  script:
#    - npm ci
#    - npm run test:ci:junit 
#  only:
#    - merge_requests
#    - branches
#  artifacts:
#    when: always
#    reports:
#      junit:
#        - junit.xml
#
#deploy_review:
#  dependencies: [build-qa]
#  stage: deploy
#  script:
#    - rm -rf $PROD_DEPLOY_DIR/* || true
#    - tar -zxf nex-qa.tar.gz --directory $PROD_DEPLOY_DIR
#    - echo "http://$CI_ENVIRONMENT_SLUG.$APPS_DOMAIN" > environment_url.txt
#    - cd $PROD_DEPLOY_DIR && cd NEX
#    - pm2 del nex-review || true 
#    - pm2 start npm --name nex-review -- run start
#  environment:
#    name: review/$CI_COMMIT_REF_SLUG
#    url: http://$CI_ENVIRONMENT_SLUG.$APPS_DOMAIN
#  artifacts:
#    paths:
#      - environment_url.txt
#  rules:
#  - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^release/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^hot-fix/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^feature/
#  tags:
#    - deploy-review
#
#stop_review_app:
#  dependencies: [deploy_review]
#  stage: deploy
#  script: 
#    - pm2 del nex-review
#  environment:
#    name: review/$CI_COMMIT_REF_NAME
#    action: stop
#  rules:
#  - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^release/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^hot-fix/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^feature/
#  tags:
#    - deploy-review
#
#deployToQA:
#  stage: deploy
#  script: 
#    - rm -rf $PROD_DEPLOY_DIR/* || true
#    - tar -zxf nex-qa.tar.gz --directory $PROD_DEPLOY_DIR
#    - cd $PROD_DEPLOY_DIR && cd NEX
#    - pm2 del nex-QA || true 
#    - pm2 start npm --name nex-QA -- run start
#  dependencies: [build-qa]
#  environment:
#    name: QA
#    url: https://nex-cicd.peerplays.download
#  rules:
#  - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH =~ /^release/ || $CI_COMMIT_BRANCH =~ /^hot-fix/
#  when: manual
#  tags:
#    - deploy
#
#deployToAlphanet:
#  stage: deploy
#  script: 
#    - rm -rf $PROD_DEPLOY_DIR/* || true
#    - tar -zxf nex-qa.tar.gz --directory $PROD_DEPLOY_DIR
#    - cd $PROD_DEPLOY_DIR && cd NEX
#    - pm2 del nex-alpha || true 
#    - pm2 start npm --name nex-alpha -- run start
#  dependencies: [build-qa]
#  environment:
#    name: alphanet
#    url: https://alphanet-nex.peerplays.download/
#  rules:
#    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^release/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^hot-fix/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^feature/
#  when: manual
#  tags:
#    - alphanet
#
#deployToStaging:
#  stage: deploy
#  script: 
#    - rm -rf $PROD_DEPLOY_DIR/* || true
#    - tar -zxf nex-stg.tar.gz --directory $PROD_DEPLOY_DIR
#    - cd $PROD_DEPLOY_DIR && cd NEX
#    - pm2 del nex-staging || true
#    - pm2 start npm --name nex-staging -- run start
#  after_script:
#    - curl -X POST --fail -F token=$CI_TRIGGER_TOKEN -F ref=main https://gitlab.com/api/v4/projects/40772871/trigger/pipeline
#  dependencies: [build-stg]
#  environment:
#    name: staging
#    url: https://nex-staging.peerplays.download
#  rules:
#  - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^release/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^hot-fix/
#    allow_failure: true
#    when: manual 
#  tags:
#    - staging
#
#deployToProduction:
#  stage: deploy
#  script: 
#    - rm -rf $PROD_DEPLOY_DIR/* || true
#    - tar -zxf nex-prod.tar.gz --directory $PROD_DEPLOY_DIR
#    - cd $PROD_DEPLOY_DIR && cd NEX
#    - pm2 del nex || true
#    - pm2 start npm --name nex -- run start
#  dependencies: [build-production]
#  environment:
#    name: prod
#    url: https://nex.peerplays.com
#  rules:
#    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
#  when: manual 
#  tags:
#    - production

deployHAPROXY:
  image: geerlingguy/docker-ubuntu2004-ansible 
  stage: deploy
  before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client git -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Give the right permissions, otherwise ssh-add will refuse to add files
  ## Add the SSH key stored in SSH_PRIVATE_KEY file type CI/CD variable to the agent store
  ##
  - chmod 400 "$SSH_PRIVATE_KEY"
  - ssh-add "$SSH_PRIVATE_KEY"

  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  script:  
    - ls -lah
    - pwd
    - git clone -b develop $ANSIBLE_URL
    - cd $ANSIBLE_DIR
    - pwd
    - ls -lah
    - ansible-playbook -v --private-key $ANSIBLE_KEY nex.yaml
  dependencies: [build-production]
  rules:
    - if: '$CI_COMMIT_BRANCH == "feature/pipeline-deploy-rework"'
  when: manual 
  tags:
    - haproxy




#dast:
#  stage: dast
#  #before_script:
#  #  - if [ "$CI_COMMIT_REF_NAME" != "dev" ]; then export DAST_WEBSITE=$(cat environment_url.txt); else export DAST_WEBSITE=$DAST_WEBSITE; fi
#  artifacts:
#    paths: 
#      - gl-dast-report.json
#  rules:
#  - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^release/ || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^hot-fix/
#
#  
#